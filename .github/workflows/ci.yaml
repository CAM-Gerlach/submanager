# Perform a variety of CI checks to ensure the changes work and conform to standards
name: CI Checks

on:  # yamllint disable-line rule:truthy
  # This avoids having duplicate builds for a pull request
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  lint:
    name: Lint Python ${{ matrix.python-version }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-latest
          python-version: '3.9'
        - os: ubuntu-latest
          python-version: '3.7'
        - os: windows-latest
          python-version: '3.8'
        - os: macos-latest
          python-version: '3.8'
    steps:
    - name: Checkout branch
      uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Create virtualenv
      uses: syphar/restore-virtualenv@v1
      id: env
    - name: Print basic Python info
      run: 'python -c "import sys; print(sys.executable, sys.version)"'
    - name: Install baseline deps
      run: python -m pip install --upgrade pip setuptools wheel
    - name: Install development dependencies
      run: pip install --upgrade -r requirements-dev.txt
    - name: Install package
      run: pip install --upgrade .
    - name: Pip check
      run: pip check
    - name: Run main Pre-Commit hooks
      uses: pre-commit/action@v2.0.3

  test:
    name: Test Python ${{ matrix.python-version }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-latest
          python-version: '3.9'
        - os: ubuntu-latest
          python-version: '3.7'
        - os: ubuntu-latest
          python-version: 'pypy-3.7'
        - os: windows-latest
          python-version: '3.8'
        - os: macos-latest
          python-version: '3.8'
    steps:
    - name: Checkout branch
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Create virtualenv
      uses: syphar/restore-virtualenv@v1
      id: env
    - name: Print basic Python info
      run: 'python -c "import sys; print(sys.executable, sys.version)"'
    - name: Install baseline deps
      run: python -m pip install --upgrade pip setuptools wheel
    - name: Install build deps
      run: python -m pip install --upgrade -r requirements-build.txt
    - name: Build package
      run: python -bb -X dev -W error -m build
    - name: Install wheel
      shell: bash
      run: 'echo dist/*.whl | xargs -I % pip install --upgrade %[test]'
    - name: Pip check
      run: pip check
    - name: Run Pytest
      run: python -bb -X dev -W error -m pytest
    - name: Twine check
      run: twine check --strict dist/*
